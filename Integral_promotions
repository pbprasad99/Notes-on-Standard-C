Numbers:
-------
             (Dots are for readablility)

           Dec             Binary                               Hex
_______________________________________________________________________
2^8        256             0001.0000.0000                     0x100      } The range of unisgned 8 bit type is 
2^(8)-1    255             1111.1111                           0xFF      } 0 to 2^(8)-1      
-----------------------------------------------------------------------
2^(7)      128              1000.0000                          0x80      } The range of 2's complement 8 bit data type is
2^(7)-1    127              0111.1111                          0x7F      } -2^7 to 2^(7) -1
_______________________________________________________________________

_______________________________________________________________________    
2^(16)     65536           0001.0000.0000.0000.0000           0x10000      } The range of unsigned bit type is 
2^(16)-1   65535           1111.1111.1111.1111                 0xFFFF      } 0 to 2^(16) -1
-----------------------------------------------------------------------    }  
2^(15)     32768          1000.0000.0000.0000                0x8000        }  The range of 2's complement 16 bit data type is
2^(15)-1   32767          0111.1111.1111.1111                0x7FFF        }  -2^(15)   to 2^(15) -1
_______________________________________________________________________

2^(32)     4294967296      0001.0000.0000.0000.0000           0x100000000  } The range of 32 unsigned type is 
                           .0000.0000.0000.0000                            } 0 to 2^(32) -1
2^(32)-1   4294967295      1111.1111.1111.1111.               0xFFFFFFFF   }
                           1111.1111.1111.1111
------------------------------------------------------------------------
2^(31)     2147483648     1000.0000.0000.0000                 0x80000000   }
                          0000.0000.0000.0000                              }  The range of 32 bit 2's complement is               
2^(31)-1   2147483647     0111.1111.1111.1111.                0x7FFFFFFF   }  -(2^31)  to (2^31)-1 
                          1111.1111.1111.1111                              
________________________________________________________________________

Unsigned vs Signed encoding:
----------------------------
Most computers use 2's complement encoding to represent negative values. The MSB is interpreted as having a negative weight.


          unsigned
1111       ----->       8 + 4 + 2 + 1 = 15   

           signed
1111       ------>     -8 + 4 + 2 + 1  = -1


infact 0xF    =  -1
       0xFF   =  -1
       0xFFF  =   -1
       0xFFFF =   -1    and so on....


For a byte the numbers 0x00 to 0x7F are positive and have the same encoding for signed and 2's complement.

Unsigned range:
---------------

For a w bit data type:
0 ---- (2^w - 1) 

For a byte : 0x00 - 0xFF

Note that the maximum value for an unsigned w bit data type is 2^w-1.

Signed range:
------------
For a 2's complement ecoding of w bit data type:
The minimum value is when the MSB in the bit representation is 1 and rest of the bits are low. The index of the MSB is (w-1) and since its weight is negative, the minimum value we have is -2^(w-1).
The maximum value is with the MSB low and rest of the bits high, which is the same as the maximum value for a (w-1) bit unisnged data type. Therefore we have a max. value of 2^(w-1)-1.

-2^(w-1)  ---- 2^(w-1) -1

For a byte (bit representations) the range would be : 0x80 - 0x7F

Conversions between signed and unsigned numbers:
------------------------------------------------
When a cast happens between unsigned and signed type for a w bit data type, the underlying bit representation stays the same. However the interpretation of the bit pattern changes.

For a unsigned to signed conversion, the value will remain the same if the MSB is low. That is, if the value is <= 2^(w-1)-1.
Once the value of the unsigned type becomes greater than or equal to 2^(w-1) the number becomes negative in 2's complement interpretation.

U2T converts an unsigned number u to two's complement:
   U2T = u                         -- if u < 2^(w-1)
       
       = u - 2^(w-1) - 2^(w-1)     -- if u >= 2^(w-1)     
       = u - 2.2^(w-1)
       = u - 2^(w-1+1)
       = u - 2^(w)


For a cast from a signed to unsigned type, the number will be the same for values < 2^(w-1). 
   T2U converts a 2's complement signed number s to unsigned:
   T2U = s                  ---  if s < 2^(w-1)
       
       = s +  2^(w-1) + 2^(w-1)  --- if s >= 2^(w-1)
       = s +  2^w  


Notice the bit representations:

#include<stdio.h>

main()
{
 int a = 0xFFFFFFFFU ;
 int b = 0xFFFFFFFEU ;
 int c = 0xFFFFFFFDU ;
 int d = 0xFFFFFFFCU ;
 printf("%d \n %d \n %d \n %d \n ",a,b,c,d); 

}

Output:
-1
-2
-3
-4

#include<stdio.h>

main()
{
 int a = -1 ;
 int b = -2 ;
 int c = -3 ;
 int d = -4 ;
 printf("%X \n %X \n %X \n %X \n ",a,b,c,d); 

}
Output:
FFFFFFFF 
FFFFFFFE 
FFFFFFFD 
FFFFFFFC 
   

Conversions between signed and unsigned types can happen:
   1.)Due to explicit casting.
   1.)Implicitly by assigning an expression of one type to variable of another type.

Integer promotion rules:
-----------------------
Arithmetic operations are carried out with at least the precision of int.
SIgned/unsigned char and signed/unsigned short are always promoted to signed int.
The value and sign will be preserved. This is called value preserving.

Integral promotions in C are value preserving.

Quoting from here (https://docs.oracle.com/cd/E19205-01/819-5265/6n7c29d69/index.html):
"In most C compilers, the simpler rule, “unsigned preserving,” is used: when an unsigned type needs to be widened, it is widened to an unsigned type; when an unsigned type mixes with a signed type, the result is an unsigned type.

The other rule, specified by ISO C, is known as “value preserving,” in which the result type depends on the relative sizes of the operand types. When an unsigned char or unsigned short is widened, the result type is int if an int is large enough to represent all the values of the smaller type. Otherwise, the result type is unsigned int. The value preserving rule produces the least surprise arithmetic result for most expressions."

Quoting from here (http://c-faq.com/expr/preservingrules.html):
--------------------------------------------------------------
What's the difference between the ``unsigned preserving'' and ``value preserving'' rules?

These rules concern the behavior when an unsigned type must be promoted to a ``larger'' type. Should it be promoted to a larger signed or unsigned type? (To foreshadow the answer, it may depend on whether the larger type is truly larger.)

Under the unsigned preserving (also called ``sign preserving'') rules, the promoted type is always unsigned. This rule has the virtue of simplicity, but it can lead to surprises (see the first example below).

Under the value preserving rules, the conversion depends on the actual sizes of the original and promoted types. If the promoted type is truly larger--which means that it can represent all the values of the original, unsigned type as signed values--then the promoted type is signed. If the two types are actually the same size, then the promoted type is unsigned (as for the unsigned preserving rules).

Since the actual sizes of the types are used in making the determination, the results will vary from machine to machine. On some machines, short int is smaller than int, but on some machines, they're the same size. On some machines, int is smaller than long int, but on some machines, they're the same size.

In practice, the difference between the unsigned and value preserving rules matters most often when one operand of a binary operator is (or promotes to) int and the other one might, depending on the promotion rules, be either int or unsigned int. If one operand is unsigned int, the other will be converted to that type--almost certainly causing an undesired result if its value was negative (again, see the first example below). When the ANSI C Standard was established, the value preserving rules were chosen, to reduce the number of cases where these surprising results occur. (On the other hand, the value preserving rules also reduce the number of predictable cases, because portable programs cannot depend on a machine's type sizes and hence cannot know which way the value preserving rules will fall.)

Here is a contrived example showing the sort of surprise that can occur under the unsigned preserving rules:

	unsigned short us = 10;
	int i = -5;
	if(i > us)
		printf("whoops!\n");
The important issue is how the expression i > us is evaluated. Under the unsigned preserving rules (and under the value preserving rules on a machine where short integers and plain integers are the same size), us is promoted to unsigned int. The usual integral conversions say that when types unsigned int and int meet across a binary operator, both operands are converted to unsigned, so i is converted to unsigned int, as well. The old value of i, -5, is converted to some large unsigned value (65,531 on a 16-bit machine). This converted value is greater than 10, so the code prints ``whoops!''
Under the value preserving rules, on a machine where plain integers are larger than short integers, us is converted to a plain int (and retains its value, 10), and i remains a plain int. The expression is not true, and the code prints nothing. (To see why the values can be preserved only when the signed type is larger, remember that a value like 40,000 can be represented as an unsigned 16-bit integer but not as a signed one.)

Unfortunately, the value preserving rules do not prevent all surprises. The example just presented still prints ``whoops'' on a machine where short and plain integers are the same size. The value preserving rules may also inject a few surprises of their own--consider the code:

unsigned char uc = 0x80;
	unsigned long ul = 0;
	ul |= uc << 8;
	printf("0x%lx\n", ul);
Before being left-shifted, uc is promoted. Under the unsigned preserving rules, it is promoted to an unsigned int, and the code goes on to print 0x8000, as expected. Under the value preserving rules, however, uc is promoted to a signed int (as long as int's are larger than char's, which is usually the case). The intermediate result uc << 8 goes on to meet ul, which is unsigned long. The signed, intermediate result must therefore be promoted as well, and if int is smaller than long, the intermediate result is sign-extended, becoming 0xffff8000 on a machine with 32-bit longs. On such a machine, the code prints 0xffff8000, which is probably not what was expected. (On machines where int and long are the same size, the code prints 0x8000 under either set of rules.)
To avoid surprises (under either set of rules, or due to an unexpected change of rules), it's best to avoid mixing signed and unsigned types in the same expression, although as the second example shows, this rule is not always sufficient. You can always use explicit casts to indicate, unambiguously, exactly where and how you want conversions performed; see questions 12.42 and 16.7 for examples. (Some compilers attempt to warn you when they detect ambiguous cases or expressions which would have behaved differently under the unsigned preserving rules, although sometimes these warnings fire too often; see also question 3.18.)
Usual arihtmetic Conversions:
----------------------------
https://books.google.com/books?id=Yll8qIrE8zQC&pg=PA49&lpg=PA49&dq=is+unsigned+char+promoted+to+signed+int&source=bl&ots=rJ1g_QI2pa&sig=4vQcgze-_OddUDLiZMlt7QtxBK4&hl=en&sa=X&ei=hTwpVeSSO8acgwSTlILQDg&sqi=2&ved=0CEkQ6AEwBg#v=onepage&q=is%20unsigned%20char%20promoted%20to%20signed%20int&f=false

Typing of of Unsuffixed Integral Constants:
-------------------------------------------
Quoting from here (https://docs.oracle.com/cd/E19205-01/819-5265/6n7c29d69/index.html):
As with expressions, the rules for the types of certain integral constants have changed. In K&R C, an unsuffixed decimal constant had type int only if its value fit in an int; an unsuffixed octal or hexadecimal constant had type int only if its value fit in an unsigned int. Otherwise, an integral constant had type long. At times, the value did not fit in the resulting type. In the 1990 ISO/IEC C standard, the constant type is the first type encountered in the following list that corresponds to the value:

unsuffixed decimal: int, long, unsigned long

unsuffixed octal or hexadecimal: int, unsigned int, long, unsigned long

U suffixed: unsigned int, unsigned long

L suffixed: long, unsigned long

UL suffixed: unsigned long

The ISO C compiler warns you, when you use the -xtransition option, about any expression whose behavior might change according to the typing rules of the constants involved. The old integral constant typing rules are used only in the transition mode; the ISO and conforming modes use the new rules.



Unsigned Addition:
-----------------
If x and y are two non negative integer s.t. 0<= x,y <=2^w - 1, the range of their sum will be 0 <= x+y <=2^(w+1) -2 
i.e. for a w bit number you would need w+1 bits to accommmodate all results of unsigned addition.

Unsigned addition is modular if there is an overflow the highest bit in the w+1 bit representation is discarded which equivalent to mod 2^w. This is the same as subtracting 2^w from the result which is the same as taking the 2's complement.

This is why unsigned overflow is well defined.

If x+y >= 2^w, the result is (x+y)-2^w

Say s= x+y, an overflow has occured if s<x (or equivalently s<y )
 
Modular arithmetic is commutative and associative.

Unsigned Negation:
------------------
Consider the following function:

//if x is an unsigned number -x = 2^w -x
void UnsignedNegation()
{
unsigned int x;
printf("Unisgned Negation is modular: -x = 2^w - x unless x is 0.\n");
for(x=0;x<=10;x++)
{
printf("Unisgned Negation of %u : %u\n",x,-x);
printf("Cast the result to signed : %d\n",-x);
}
}

Output:
Unisgned Negation is modular: -x = 2^w - x unless x is 0.
Unisgned Negation of 0 : 0
Cast the result to signed : 0
Unisgned Negation of 1 : 4294967295
Cast the result to signed : -1
Unisgned Negation of 2 : 4294967294
Cast the result to signed : -2
Unisgned Negation of 3 : 4294967293
Cast the result to signed : -3
Unisgned Negation of 4 : 4294967292
Cast the result to signed : -4
Unisgned Negation of 5 : 4294967291
Cast the result to signed : -5
Unisgned Negation of 6 : 4294967290
Cast the result to signed : -6
Unisgned Negation of 7 : 4294967289
Cast the result to signed : -7
Unisgned Negation of 8 : 4294967288
Cast the result to signed : -8
Unisgned Negation of 9 : 4294967287
Cast the result to signed : -9
Unisgned Negation of 10 : 4294967286
Cast the result to signed : -10


PITFALL:
-------
1)Signed integer overflow is undefined:

INT_MIN/-1

Since the range of 2's complement numbers is not symmetric, this results in a signed integer overflow which is undefined behavior.


2)Why is INT_MIN defined as -INT_MAX - 1 

http://stackoverflow.com/questions/14695118/2147483648-0-returns-true-in-c
3)
When you compare a signed int with a negative value to an unsigned int
3)
When you use a small unsigned integral type with with these operators:
 >>, /, %, <,<=, >, or >=
  
Integer arithmetic:
------------------
http://pages.cs.wisc.edu/~smoler/x86text/lect.notes/arith.int.html

4)
Integral promotions: value preserving vs unsigned preserving:
-------------------------------------------------------------
http://www.hpmmsupport.com/MPE%20Manual/5000/B3150690011.11986/34.htm
https://docs.oracle.com/cd/E19205-01/819-5265/6n7c29d69/index.html
http://c-faq.com/expr/preservingrules.html
http://www.microchip.com/stellent/groups/sitecomm_sg/documents/devicedoc/en555854.pdf

