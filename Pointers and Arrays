In C there is a duality between arrays and pointers,but they are not the same.Intuitively the difference between an array and a pointer is clear. When you declare an of 5 objects of type T . The array refers to the entire space allocated in memory to store the array. Whereas a pointer to an element of the array occupies sizeof(type *).

ARRAY:
-----
An array name is not a variable which stores an address(pointer) and cannot be used as such. Its a symbol with an associated type and size. It designates an object of array type. An array is not a MODIFIABLE LVALUE.

SIZEOF AND ADRESSOF OPERATIONS ON ARRAY:
-------------------------------------------
Sizeof(array) gives you the size of the entire space allocated in memory to store the array.

Applying the address of operator to array returns a pointer to the array. This is not the same as Pointer to element of array. 

char a[] = "abc";
char *b[4] =  &a; // Pointer to array of six characters 


Pointer Decay:
-------------
When used in an expession the array decays to pointer to the first element of the array.
char a[] = "abc";
char *b = a; // Pointer to first element of array
char c = a[1]; // a[1] same as *(a+1). assigns 'a' to c 
char d = b[1]; //b[1] same as *(b+1). assigns 'a' to d 


"Except when it is the operand of the sizeof operator or the unary &
operator, or is a character string literal used to initialize an array
of character type, or is a wide string literal used to initialize an
array with element type compatible with wchar_t, an lvalue that has
type ``array of type '' is converted to an expression that has type
``pointer to type '' that points to the initial member of the array
object and is not an lvalue. "
 - C89 3.2.2.1

ASIDE:
-----
subscript operation on pointers to array elements is commutative.
a[1] is the same as 1[a] is the same as *(a+1) 
This is because addition is commutative *(a+1) is the same as *(1+a)

FUNCTION CANNOT RETURN ARRAY:
----------------------------
"The return type of a function shall be void or an object type other
than array."
 - C89 3.7.1

STRING LITERAL:
---------------

"A character string literal has static storage duration and type
``array of char ,'' and is initialized with the given characters."
         -C89 3.1.4

Since a string literal is a object of type char array,  and an lvalue of type array of type
to a pointer to type that points to the first element you can subscript it:
"abcde"[5] evaluates to e
So does 5["abcde"]

This is because "abcde" is char array. When used in an expression it decays to a pointer to char pointing to the first element of the array.


MULTIDIMENSIONAL ARRAYS:
-----------------------
There are no truly multidimensional arrays in c. Multidimensional arrays are simulated by declaring arrays of arrays.
int a[10][5];
a is an array of 10 arrays of 5 ints. When used in an expression a will decay to pointer to array of 5 ints.
int b[10][5][3];
b is an array of 10 arrays of 5 arrays of 3 ints. When used in an expresseion b will decay to pointer to an array of 5 arrays of 3 ints.

DECLARE MULTIDIMENSIONAL ARRAYS WITH TYPEDEF:
--------------------------------------------
typedef int vector[10];  | int matrix[20][10]; | matrix is an array of 20 arrays of 10 ints
vector matrix[20];       |                     |

typedef array2d[10][5]  | int array3d[20][10][5] |array3d is an array of 5 arrays of 20  arrays of 10 ints
array2d array3d[20]     |                        |
 
SUBSCRIPTING ARRAYS OF ARRAYS:
----------------------------
int a[10][10];

a[2][3] --> *(*(a+2) +3)

1)The type of a is array of array. When used in an expression it decays to pointer to array 
a+2 is a pointer pointing to the second array. 
2)*(a+2) gives you the second sub array -->When you dereference a pointer to an array, what do you get ? You get an array . And when you use an lvalue that has type ``array of type '' in an expression what happens? It is converted to an expression that has type
``pointer to type '' that points to the initial member of the array object and is not an lvalue.
3) Since a+2 decays to pointer to array and *(a+2) decays to pointer to int *(*(a+2)) would give you the first element of the second suba array. 
4)*(*(a+2)+3) would give you the pointer to third element of second sub array.

Now lets consider an array with one more dimension.
int a[3][4][5];

How is a[2][3][4] eveluated?
You have a which is an array of 3 arrays. Each of which is an array of 4 arrays of 5 ints.
 The type of a is array of array of array of int
 a decays to pointer to array of array
 (a+2) decays to pointer to 2nd sub array which is an array of arrays
 *(a+2) evaluates to type array of array and decays to pointer to array
 *(a+2) + 3  evaluates to pointer to 3rd array of second sub array
 *(*(a+2)+3) evaluates to type array and decays to pointer to type of array which int (pointing to first element)
 *((*(a+2)+3) --> pointer to first element    
 *(*(a+2)+3) + 4  --> pointer to 4th element
 *(*(*(a+2)+3) + 4) --> fourth element of third subarray of second subarray. 
      
ARRAYS AS FUNCTION PARAMETERS:
------------------------------

You cannot pass arrays (or functions) to functions. Even if it appears that function accepts an array as a parameter, it is just syntactic sugar. The declaration of the parameter as "array of type" is converted to "pointer to type". 
  

"On entry to the function the value of each argument expression
shall be converted to the type of its corresponding parameter, as if
by assignment to the parameter.  Array expressions and function
designators as arguments are converted to pointers before the call. A
declaration of a parameter as ``array of type '' shall be adjusted to
``pointer to type ,'' and a declaration of a parameter as ``function
returning type '' shall be adjusted to ``pointer to function returning
type ,'' as in $3.2.2.1.  The resulting parameter type shall be an
object type."
  -- C89


SUMMARY:
-------
Array is not a modifiable lvalue
An lvalue of  type "Array of type" is converted to an EXPRESSION that has type "pointer to type" and pointing to first element of an array and is not an lvalue.   
&arrayname returns pointer to array and not pointer to element of array.

